//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AFLSWebProjectTest
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;


    [DeploymentItem("aflswebprojecttest\\ZonesData.csv", "aflswebprojecttest")]
    [DataSource("ZonesSource", "Microsoft.VisualStudio.TestTools.DataSource.CSV", "|DataDirectory|\\aflswebprojecttest\\ZonesData.csv", Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod.Sequential, Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns.SelectOnlyBoundColumns, "ZonesData#csv")]
    public class H_ZonesCoded : WebTest
    {

        public H_ZonesCoded()
        {
            this.Context.Add("Url", "http://localhost");
            this.Context.Add("Instance", "/AFLS/");
            this.PreAuthenticate = true;
            this.Proxy = "default";
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            // Inicializar reglas de validación aplicables a todas las solicitudes de prueba web
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidateResponseUrl validationRule1 = new ValidateResponseUrl();
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidationRuleResponseTimeGoal validationRule2 = new ValidationRuleResponseTimeGoal();
                validationRule2.Tolerance = 0D;
                this.ValidateResponseOnPageComplete += new EventHandler<ValidationEventArgs>(validationRule2.Validate);
            }

            WebTestRequest request1 = new WebTestRequest((this.Context["Url"].ToString() + this.Context["Instance"].ToString()));
            request1.ExpectedResponseUrl = (this.Context["Url"].ToString()
                        + (this.Context["Instance"].ToString() + "LogOn"));
            yield return request1;
            request1 = null;

            WebTestRequest request2 = new WebTestRequest((this.Context["Url"].ToString()
                            + (this.Context["Instance"].ToString() + "Account/LogOn")));
            request2.Method = "POST";
            request2.Headers.Add(new WebTestRequestHeader("Accept", "*/*"));
            request2.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request2.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["Url"].ToString()
                                + (this.Context["Instance"].ToString() + "LogOn"))));
            StringHttpBody request2Body = new StringHttpBody();
            request2Body.ContentType = "application/json";
            request2Body.InsertByteOrderMark = false;
            request2Body.BodyString = "{\"DefaultAuth\":\"ARANDA\",\"UserName\":\"administrator\",\"Password\":\"ABC123\",\"RememberM" +
                "e\":\"true\"}";
            request2.Body = request2Body;
            yield return request2;
            request2 = null;

            CountingLoopRule conditionalRule1 = new CountingLoopRule();
            conditionalRule1.ContextParameterName = "Contador de bucle";
            conditionalRule1.IterationsCount = 4D;

            int maxIterations1 = -1;
            bool advanceDataCursors1 = true;
            this.BeginLoop(conditionalRule1, maxIterations1, advanceDataCursors1);
            this.RegisterDataSourceInLoop(conditionalRule1, "ZonesSource", "ZonesData#csv");

            for (; this.ExecuteConditionalRule(conditionalRule1);)
            {
                WebTestRequest request3 = new WebTestRequest((this.Context["Url"].ToString()
                                + (this.Context["Instance"].ToString() + "CoverageZones/Create")));
                request3.Method = "POST";
                request3.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
                request3.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
                request3.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["Url"].ToString() + this.Context["Instance"].ToString())));
                StringHttpBody request3Body = new StringHttpBody();
                request3Body.ContentType = "application/json";
                request3Body.InsertByteOrderMark = false;
                request3Body.BodyString = ("{\r\n  \"Name\": \""
                            + (this.Context["ZonesSource.ZonesData#csv.Name"].ToString() + @""",
  ""Description"": ""descripción de zona"",
  ""IsActive"": true,
  ""selected"": true,
  ""Priority"": 2,
  ""Enable"": ""on"",
  ""Type"": ""polygon"",
  ""ZonePoints"": [
    {
      ""DataY"": 4.69572849833038,
      ""DataX"": -74.06891621423341,
      ""DataOrderId"": 0
    },
    {
      ""DataY"": 4.679988483069062,
      ""DataX"": -74.06033314538575,
      ""DataOrderId"": 1
    },
    {
      ""DataY"": 4.674684702480919,
      ""DataX"": -74.06977452111818,
      ""DataOrderId"": 2
    },
    {
      ""DataY"": 4.689398317431443,
      ""DataX"": -74.08402241540529,
      ""DataOrderId"": 3
    }
  ],
  ""Providers"": [
    {
      ""Provider"": {
        ""AssignType"": false,
        ""Description"": ""Conjunto de especialistas internos que brindan atención a los clientes de la compañía."",
        ""Id"": 1,
        ""IsActive"": true,
        ""IsExternal"": false,
        ""Name"": ""Especialistas Internos"",
        ""Priority"": 0,
        ""SpecialistsCount"": 0,
        ""label"": ""Especialistas Internos"",
        ""value"": ""Especialistas Internos""
      },
      ""ProviderId"": 1
    }
  ]
}"));
                request3.Body = request3Body;
                yield return request3;
                request3 = null;
            }

            this.EndLoop(conditionalRule1);

            WebTestRequest request4 = new WebTestRequest((this.Context["Url"].ToString()
                            + (this.Context["Instance"].ToString() + "CoverageZones/Create")));
            request4.Method = "POST";
            request4.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
            request4.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request4.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["Url"].ToString() + this.Context["Instance"].ToString())));
            StringHttpBody request4Body = new StringHttpBody();
            request4Body.ContentType = "application/json";
            request4Body.InsertByteOrderMark = false;
            request4Body.BodyString = "{\"Name\":\"Bogota zone\",\"Description\":\"descripcion\",\"IsActive\":true,\"selected\":true" +
                ",\"Priority\":2,\"Enable\":\"on\",\"Type\":\"polygon\",\"ZonePoints\":[{\"DataY\":4.7585139262" +
                "4207,\"DataX\":-74.0590456850586,\"DataOrderId\":0},{\"DataY\":4.7598824824190284,\"Dat" +
                "aX\":-74.02196682763673,\"DataOrderId\":1},{\"DataY\":4.720877567710163,\"DataX\":-74.0" +
                "1235379052735,\"DataOrderId\":2},{\"DataY\":4.672289433569392,\"DataX\":-74.0322665102" +
                "5392,\"DataOrderId\":3},{\"DataY\":4.637386017398422,\"DataX\":-74.04462612939454,\"Dat" +
                "aOrderId\":4},{\"DataY\":4.581263188692834,\"DataX\":-74.0693453676758,\"DataOrderId\":" +
                "5},{\"DataY\":4.54156389062239,\"DataX\":-74.0920046694336,\"DataOrderId\":6},{\"DataY\"" +
                ":4.614800534097066,\"DataX\":-74.20804776025392,\"DataOrderId\":7},{\"DataY\":4.640123" +
                "6027362,\"DataX\":-74.2066744692383,\"DataOrderId\":8},{\"DataY\":4.6476519076566465,\"" +
                "DataX\":-74.15517605615235,\"DataOrderId\":9},{\"DataY\":4.686660924134959,\"DataX\":-7" +
                "4.1682223208008,\"DataOrderId\":10},{\"DataY\":4.712665726685147,\"DataX\":-74.1345766" +
                "9091798,\"DataOrderId\":11},{\"DataY\":4.74277533481973,\"DataX\":-74.1187838442383,\"D" +
                "ataOrderId\":12},{\"DataY\":4.757145367343995,\"DataX\":-74.08857144189454,\"DataOrder" +
                "Id\":13},{\"DataY\":4.763988134615198,\"DataX\":-74.0748385317383,\"DataOrderId\":14}]," +
                "\"Providers\":[{\"Provider\":{\"AssignType\":false,\"Description\":\"Conjunto de especial" +
                "istas internos que brindan atención a los clientes de la compañía.\",\"Id\":1,\"IsAc" +
                "tive\":true,\"IsExternal\":false,\"Name\":\"Especialistas Internos\",\"Priority\":0,\"Spec" +
                "ialistsCount\":0,\"label\":\"Especialistas Internos\",\"value\":\"Especialistas Internos" +
                "\"},\"ProviderId\":1}]}";
            request4.Body = request4Body;
            yield return request4;
            request4 = null;

            WebTestRequest request5 = new WebTestRequest((this.Context["Url"].ToString()
                            + (this.Context["Instance"].ToString() + "CoverageZones/Create")));
            request5.Method = "POST";
            request5.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
            request5.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request5.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["Url"].ToString() + this.Context["Instance"].ToString())));
            StringHttpBody request5Body = new StringHttpBody();
            request5Body.ContentType = "application/json";
            request5Body.InsertByteOrderMark = false;
            request5Body.BodyString = @"{""Name"":""Medellin zone"",""Description"":""descripcion"",""IsActive"":true,""selected"":true,""Priority"":2,""Enable"":""on"",""Type"":""polygon"",""ZonePoints"":[{""DataY"":6.346738540222698,""DataX"":-75.54906643701173,""DataOrderId"":0},{""DataY"":6.307155668938662,""DataX"":-75.53258694482423,""DataOrderId"":1},{""DataY"":6.2416325592528405,""DataX"":-75.54425991845704,""DataOrderId"":2},{""DataY"":6.226615689165546,""DataX"":-75.5524996645508,""DataOrderId"":3},{""DataY"":6.202724329406286,""DataX"":-75.53327359033204,""DataOrderId"":4},{""DataY"":6.1638132277645194,""DataX"":-75.56279934716798,""DataOrderId"":5},{""DataY"":6.155621052622544,""DataX"":-75.58683193994142,""DataOrderId"":6},{""DataY"":6.240267407016758,""DataX"":-75.61017788720704,""DataOrderId"":7},{""DataY"":6.28053789957515,""DataX"":-75.59438504052735,""DataOrderId"":8},{""DataY"":6.311250589217826,""DataX"":-75.57378567529298,""DataOrderId"":9},{""DataY"":6.346056102637686,""DataX"":-75.57241238427735,""DataOrderId"":10}],""Providers"":[{""Provider"":{""AssignType"":false,""Description"":""Conjunto de especialistas internos que brindan atención a los clientes de la compañía."",""Id"":1,""IsActive"":true,""IsExternal"":false,""Name"":""Especialistas Internos"",""Priority"":0,""SpecialistsCount"":0,""label"":""Especialistas Internos"",""value"":""Especialistas Internos""},""ProviderId"":1}]}";
            request5.Body = request5Body;
            yield return request5;
            request5 = null;

            WebTestRequest request6 = new WebTestRequest((this.Context["Url"].ToString()
                            + (this.Context["Instance"].ToString() + "CoverageZones/Create")));
            request6.Method = "POST";
            request6.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
            request6.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request6.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["Url"].ToString() + this.Context["Instance"].ToString())));
            StringHttpBody request6Body = new StringHttpBody();
            request6Body.ContentType = "application/json";
            request6Body.InsertByteOrderMark = false;
            request6Body.BodyString = @"{""Name"":""Cali zone"",""Description"":""descripcion"",""IsActive"":true,""selected"":true,""Priority"":2,""Enable"":""on"",""Type"":""polygon"",""ZonePoints"":[{""DataY"":3.5004463483603465,""DataX"":-76.51586331201173,""DataOrderId"":0},{""DataY"":3.480570568861481,""DataX"":-76.47191799951173,""DataOrderId"":1},{""DataY"":3.4031195872187596,""DataX"":-76.46367825341798,""DataOrderId"":2},{""DataY"":3.355823439210727,""DataX"":-76.5089968569336,""DataOrderId"":3},{""DataY"":3.3643917527100235,""DataX"":-76.55191220117189,""DataOrderId"":4},{""DataY"":3.4332782395361865,""DataX"":-76.56049527001954,""DataOrderId"":5},{""DataY"":3.4867389592136537,""DataX"":-76.53302944970704,""DataOrderId"":6}],""Providers"":[{""Provider"":{""AssignType"":false,""Description"":""Conjunto de especialistas internos que brindan atención a los clientes de la compañía."",""Id"":1,""IsActive"":true,""IsExternal"":false,""Name"":""Especialistas Internos"",""Priority"":0,""SpecialistsCount"":0,""label"":""Especialistas Internos"",""value"":""Especialistas Internos""},""ProviderId"":1}]}";
            request6.Body = request6Body;
            yield return request6;
            request6 = null;

            WebTestRequest request7 = new WebTestRequest((this.Context["Url"].ToString()
                            + (this.Context["Instance"].ToString() + "CoverageZones/Create")));
            request7.Method = "POST";
            request7.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
            request7.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request7.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["Url"].ToString() + this.Context["Instance"].ToString())));
            StringHttpBody request7Body = new StringHttpBody();
            request7Body.ContentType = "application/json";
            request7Body.InsertByteOrderMark = false;
            request7Body.BodyString = @"{""Name"":""Barranquilla zone"",""Description"":""descripcion"",""IsActive"":true,""selected"":true,""Priority"":2,""Enable"":""on"",""Type"":""polygon"",""ZonePoints"":[{""DataY"":11.03360257702424,""DataX"":-74.8383883364258,""DataOrderId"":0},{""DataY"":11.003273130943021,""DataX"":-74.8493746645508,""DataOrderId"":1},{""DataY"":10.93721154540739,""DataX"":-74.83770169091798,""DataOrderId"":2},{""DataY"":10.923761718651247,""DataX"":-74.7586337551653,""DataOrderId"":3},{""DataY"":10.976344937177776,""DataX"":-74.76000704618093,""DataOrderId"":4},{""DataY"":11.014091222829554,""DataX"":-74.77717318387624,""DataOrderId"":5},{""DataY"":11.03026672186183,""DataX"":-74.8025790676653,""DataOrderId"":6},{""DataY"":11.04797782477657,""DataX"":-74.8316268320919,""DataOrderId"":7}],""Providers"":[{""Provider"":{""AssignType"":false,""Description"":""Conjunto de especialistas internos que brindan atención a los clientes de la compañía."",""Id"":1,""IsActive"":true,""IsExternal"":false,""Name"":""Especialistas Internos"",""Priority"":0,""SpecialistsCount"":0,""label"":""Especialistas Internos"",""value"":""Especialistas Internos""},""ProviderId"":1}]}";
            request7.Body = request7Body;
            yield return request7;
            request7 = null;
        }
    }
}
