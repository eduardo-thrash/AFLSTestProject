//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AFLSWebProjectTest
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;


    [DeploymentItem("aflswebprojecttest\\ClientsWithCompanyData.csv", "aflswebprojecttest")]
    [DataSource("ClientsWithCompanySource", "Microsoft.VisualStudio.TestTools.DataSource.CSV", "|DataDirectory|\\aflswebprojecttest\\ClientsWithCompanyData.csv", Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod.Sequential, Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns.SelectOnlyBoundColumns, "ClientsWithCompanyData#csv")]
    [DeploymentItem("aflswebprojecttest\\ClientsWithoutCompanyData.csv", "aflswebprojecttest")]
    [DataSource("ClientsWithoutCompanySource", "Microsoft.VisualStudio.TestTools.DataSource.CSV", "|DataDirectory|\\aflswebprojecttest\\ClientsWithoutCompanyData.csv", Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod.Sequential, Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns.SelectOnlyBoundColumns, "ClientsWithoutCompanyData#csv")]
    public class M_ClientsCoded : WebTest
    {

        public M_ClientsCoded()
        {
            this.Context.Add("Url", "http://localhost");
            this.Context.Add("Instance", "/AFLS/");
            this.PreAuthenticate = true;
            this.Proxy = "default";
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            // Inicializar reglas de validación aplicables a todas las solicitudes de prueba web
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidateResponseUrl validationRule1 = new ValidateResponseUrl();
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidationRuleResponseTimeGoal validationRule2 = new ValidationRuleResponseTimeGoal();
                validationRule2.Tolerance = 0D;
                this.ValidateResponseOnPageComplete += new EventHandler<ValidationEventArgs>(validationRule2.Validate);
            }

            WebTestRequest request1 = new WebTestRequest((this.Context["Url"].ToString() + this.Context["Instance"].ToString()));
            request1.ExpectedResponseUrl = (this.Context["Url"].ToString()
                        + (this.Context["Instance"].ToString() + "LogOn"));
            yield return request1;
            request1 = null;

            WebTestRequest request2 = new WebTestRequest((this.Context["Url"].ToString()
                            + (this.Context["Instance"].ToString() + "Account/LogOn")));
            request2.Method = "POST";
            request2.Headers.Add(new WebTestRequestHeader("Accept", "*/*"));
            request2.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request2.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["Url"].ToString()
                                + (this.Context["Instance"].ToString() + "LogOn"))));
            StringHttpBody request2Body = new StringHttpBody();
            request2Body.ContentType = "application/json";
            request2Body.InsertByteOrderMark = false;
            request2Body.BodyString = "{\"DefaultAuth\":\"ARANDA\",\"UserName\":\"administrator\",\"Password\":\"ABC123\",\"RememberM" +
                "e\":\"true\"}";
            request2.Body = request2Body;
            yield return request2;
            request2 = null;

            WebTestRequest request3 = new WebTestRequest((this.Context["Url"].ToString()
                            + (this.Context["Instance"].ToString() + "Users/Save")));
            request3.Method = "POST";
            request3.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
            request3.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request3.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["Url"].ToString() + this.Context["Instance"].ToString())));
            StringHttpBody request3Body = new StringHttpBody();
            request3Body.ContentType = "application/json";
            request3Body.InsertByteOrderMark = false;
            request3Body.BodyString = @"{
  ""FullName"": """",
  ""IsLocal"": true,
  ""Availabilities"": [],
  ""Name"": ""Naiara Serrano Santiago"",
  ""Company"": {
    ""Address"": """",
    ""Name"": """"
  },
  ""Email"": """",
  ""Phone"": """",
  ""HasSignature"": false,
  ""IsActive"": true,
  ""newClass"": ""Normal"",
  ""selected"": true,
  ""UniqueReference"": ""90756567"",
  ""CompanyName"": """",
  ""AddlAddressInfo"": """",
  ""country-select"": ""CO"",
  ""Address"": """",
  ""Longitude"": null,
  ""Latitude"": null,
  ""Type"": ""Client"",
  ""ClientServices"": [],
  ""CompanyServices"": [],
  ""AdditionalFields"": [],
  ""Channels"": [
    {
      ""ChannelName"": ""AssistMe"",
      ""IsActiveChannel"": false,
      ""ChannelId"": 1,
      ""IsActive"": false
    }
  ],
  ""UserName"": ""90756567""
}";
            request3.Body = request3Body;
            yield return request3;
            request3 = null;

            WebTestRequest request4 = new WebTestRequest((this.Context["Url"].ToString()
                            + (this.Context["Instance"].ToString() + "Users/Save")));
            request4.Method = "POST";
            request4.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
            request4.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request4.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["Url"].ToString() + this.Context["Instance"].ToString())));
            StringHttpBody request4Body = new StringHttpBody();
            request4Body.ContentType = "application/json";
            request4Body.InsertByteOrderMark = false;
            request4Body.BodyString = @"{
  ""FullName"": """",
  ""IsLocal"": true,
  ""Availabilities"": [],
  ""Name"": ""Pau Vargas Gallardo"",
  ""Company"": {
    ""Address"": """",
    ""Name"": """"
  },
  ""Email"": """",
  ""Phone"": """",
  ""HasSignature"": false,
  ""IsActive"": true,
  ""newClass"": ""Normal"",
  ""selected"": true,
  ""UniqueReference"": ""19302456"",
  ""CompanyName"": """",
  ""AddlAddressInfo"": """",
  ""country-select"": ""CO"",
  ""Address"": """",
  ""Longitude"": null,
  ""Latitude"": null,
  ""Type"": ""Client"",
  ""ClientServices"": [],
  ""CompanyServices"": [],
  ""AdditionalFields"": [],
  ""Channels"": [
    {
      ""ChannelName"": ""AssistMe"",
      ""IsActiveChannel"": false,
      ""ChannelId"": 1,
      ""IsActive"": false
    }
  ],
  ""UserName"": ""19302456""
}";
            request4.Body = request4Body;
            yield return request4;
            request4 = null;

            WebTestRequest request5 = new WebTestRequest((this.Context["Url"].ToString()
                            + (this.Context["Instance"].ToString() + "Users/Save")));
            request5.Method = "POST";
            request5.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
            request5.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request5.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["Url"].ToString() + this.Context["Instance"].ToString())));
            StringHttpBody request5Body = new StringHttpBody();
            request5Body.ContentType = "application/json";
            request5Body.InsertByteOrderMark = false;
            request5Body.BodyString = @"{
  ""FullName"": """",
  ""IsLocal"": true,
  ""Availabilities"": [],
  ""Name"": ""Mateo Ramos Ramos"",
  ""Company"": {
    ""Address"": """",
    ""Name"": """"
  },
  ""Email"": """",
  ""Phone"": """",
  ""HasSignature"": false,
  ""IsActive"": true,
  ""newClass"": ""Normal"",
  ""selected"": true,
  ""UniqueReference"": ""1124567345"",
  ""CompanyName"": """",
  ""AddlAddressInfo"": """",
  ""country-select"": ""CO"",
  ""Address"": """",
  ""Longitude"": null,
  ""Latitude"": null,
  ""Type"": ""Client"",
  ""ClientServices"": [],
  ""CompanyServices"": [],
  ""AdditionalFields"": [],
  ""Channels"": [
    {
      ""ChannelName"": ""AssistMe"",
      ""IsActiveChannel"": false,
      ""ChannelId"": 1,
      ""IsActive"": false
    }
  ],
  ""UserName"": ""1124567345""
}";
            request5.Body = request5Body;
            yield return request5;
            request5 = null;

            WebTestRequest request6 = new WebTestRequest((this.Context["Url"].ToString()
                            + (this.Context["Instance"].ToString() + "Users/Save")));
            request6.Method = "POST";
            request6.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
            request6.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request6.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["Url"].ToString() + this.Context["Instance"].ToString())));
            StringHttpBody request6Body = new StringHttpBody();
            request6Body.ContentType = "application/json";
            request6Body.InsertByteOrderMark = false;
            request6Body.BodyString = @"{
  ""FullName"": """",
  ""IsLocal"": true,
  ""Availabilities"": [],
  ""Name"": ""Biel Muñoz Gomez"",
  ""Company"": {
    ""Address"": """",
    ""Name"": """"
  },
  ""Email"": """",
  ""Phone"": """",
  ""HasSignature"": false,
  ""IsActive"": true,
  ""newClass"": ""Normal"",
  ""selected"": true,
  ""UniqueReference"": ""1208342567"",
  ""CompanyName"": """",
  ""AddlAddressInfo"": """",
  ""country-select"": ""CO"",
  ""Address"": """",
  ""Longitude"": null,
  ""Latitude"": null,
  ""Type"": ""Client"",
  ""ClientServices"": [],
  ""CompanyServices"": [],
  ""AdditionalFields"": [],
  ""Channels"": [
    {
      ""ChannelName"": ""AssistMe"",
      ""IsActiveChannel"": false,
      ""ChannelId"": 1,
      ""IsActive"": false
    }
  ],
  ""UserName"": ""123456789""
}";
            request6.Body = request6Body;
            yield return request6;
            request6 = null;

            // Sin compañía
            this.AddCommentToResult("Sin compañía");

            CountingLoopRule conditionalRule1 = new CountingLoopRule();
            conditionalRule1.ContextParameterName = "Contador de bucle";
            conditionalRule1.IterationsCount = 201D;

            int maxIterations1 = -1;
            bool advanceDataCursors1 = true;
            this.BeginLoop(conditionalRule1, maxIterations1, advanceDataCursors1);
            this.RegisterDataSourceInLoop(conditionalRule1, "ClientsWithoutCompanySource", "ClientsWithoutCompanyData#csv");

            for (; this.ExecuteConditionalRule(conditionalRule1);)
            {
                WebTestRequest request7 = new WebTestRequest((this.Context["Url"].ToString()
                                + (this.Context["Instance"].ToString() + "Users/Save")));
                request7.Method = "POST";
                request7.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
                request7.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
                request7.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["Url"].ToString() + this.Context["Instance"].ToString())));
                StringHttpBody request7Body = new StringHttpBody();
                request7Body.ContentType = "application/json";
                request7Body.InsertByteOrderMark = false;
                request7Body.BodyString = ("{\r\n  \"FullName\": \"\",\r\n  \"IsLocal\": true,\r\n  \"Availabilities\": [],\r\n  \"Name\": \""
                            + (this.Context["ClientsWithoutCompanySource.ClientsWithoutCompanyData#csv.Name"].ToString()
                            + ("\",\r\n  \"Company\": {\r\n    \"Address\": \"\",\r\n    \"Name\": \"\"\r\n  },\r\n  \"Email\": \"\",\r\n  \"" +
                                "Phone\": \"\",\r\n  \"HasSignature\": false,\r\n  \"IsActive\": true,\r\n  \"newClass\": \"Norma" +
                                "l\",\r\n  \"selected\": true,\r\n  \"UniqueReference\": \""
                            + (this.Context["ClientsWithoutCompanySource.ClientsWithoutCompanyData#csv.UniqueReference"].ToString()
                            + (@""",
  ""CompanyName"": """",
  ""AddlAddressInfo"": """",
  ""Address"": """",
  ""Longitude"": null,
  ""Latitude"": null,
  ""Type"": ""Client"",
  ""ClientServices"": [],
  ""CompanyServices"": [],
  ""AdditionalFields"": [
    {
      ""Id"": 1,
      ""Value"": """",
      ""TypeId"": 1
    },
    {
      ""Id"": 2,
      ""Value"": """",
      ""TypeId"": 1
    },
    {
      ""Id"": 3,
      ""Value"": """",
      ""TypeId"": 1
    },
    {
      ""Id"": 4,
      ""Value"": """",
      ""TypeId"": 1
    },
    {
      ""Id"": 5,
      ""Value"": """",
      ""TypeId"": 1
    },
    {
      ""Id"": 6,
      ""Value"": """",
      ""TypeId"": 5
    },
    {
      ""Id"": 7,
      ""Value"": """",
      ""TypeId"": 2
    },
    {
      ""Id"": 8,
      ""Value"": """",
      ""TypeId"": 3
    }
  ],
  ""Channels"": [
    {
      ""ChannelName"": ""AssistMe"",
      ""IsActiveChannel"": false,
      ""ChannelId"": 1,
      ""IsActive"": false
    }
  ],
  ""UserName"": """
                            + (this.Context["ClientsWithoutCompanySource.ClientsWithoutCompanyData#csv.UniqueReference"].ToString() + "\"\r\n}"))))));
                request7.Body = request7Body;
                yield return request7;
                request7 = null;
            }

            this.EndLoop(conditionalRule1);

            // Con compañia
            this.AddCommentToResult("Con compañia");

            CountingLoopRule conditionalRule2 = new CountingLoopRule();
            conditionalRule2.ContextParameterName = "Contador de bucle";
            conditionalRule2.IterationsCount = 199D;

            int maxIterations2 = -1;
            bool advanceDataCursors2 = true;
            this.BeginLoop(conditionalRule2, maxIterations2, advanceDataCursors2);
            this.RegisterDataSourceInLoop(conditionalRule2, "ClientsWithCompanySource", "ClientsWithCompanyData#csv");

            for (; this.ExecuteConditionalRule(conditionalRule2);)
            {
                WebTestRequest request8 = new WebTestRequest((this.Context["Url"].ToString()
                                + (this.Context["Instance"].ToString() + "Users/Save")));
                request8.Method = "POST";
                request8.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
                request8.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
                request8.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["Url"].ToString() + this.Context["Instance"].ToString())));
                StringHttpBody request8Body = new StringHttpBody();
                request8Body.ContentType = "application/json";
                request8Body.InsertByteOrderMark = false;
                request8Body.BodyString = ("{\r\n  \"FullName\": \"\",\r\n  \"IsLocal\": true,\r\n  \"Availabilities\": [],\r\n  \"Name\": \""
                            + (this.Context["ClientsWithCompanySource.ClientsWithCompanyData#csv.Name"].ToString()
                            + (@""",
  ""Company"": {
    ""Address"": null,
    ""ContactEmail"": null,
    ""ContactName"": null,
    ""ContactPhone"": null,
    ""Id"": 2,
    ""ImportedFrom"": null,
    ""IsActive"": true,
    ""IsImported"": false,
    ""Latitude"": 0,
    ""Longitude"": 0,
    ""Name"": ""Core Records WT"",
    ""ProjectId"": 0,
    ""UniqueReference"": ""8904837789-2"",
    ""label"": ""Core Records WT (8904837789-2)"",
    ""value"": ""Core Records WT""
  },
  ""Email"": """",
  ""Phone"": """",
  ""HasSignature"": false,
  ""IsActive"": true,
  ""newClass"": ""Normal"",
  ""selected"": true,
  ""Address"": """",
  ""Longitude"": 0,
  ""Latitude"": 0,
  ""CompanyServices"": [],
  ""UniqueReference"": """
                            + (this.Context["ClientsWithCompanySource.ClientsWithCompanyData#csv.UniqueReference"].ToString()
                            + (@""",
  ""CompanyName"": ""Core Records WT"",
  ""AddlAddressInfo"": """",
  ""Type"": ""Client"",
  ""ClientServices"": [],
  ""AdditionalFields"": [
    {
      ""Id"": 1,
      ""Value"": """",
      ""TypeId"": 1
    },
    {
      ""Id"": 2,
      ""Value"": """",
      ""TypeId"": 1
    },
    {
      ""Id"": 3,
      ""Value"": """",
      ""TypeId"": 1
    },
    {
      ""Id"": 4,
      ""Value"": """",
      ""TypeId"": 1
    },
    {
      ""Id"": 5,
      ""Value"": """",
      ""TypeId"": 1
    },
    {
      ""Id"": 6,
      ""Value"": """",
      ""TypeId"": 5
    },
    {
      ""Id"": 7,
      ""Value"": """",
      ""TypeId"": 2
    },
    {
      ""Id"": 8,
      ""Value"": """",
      ""TypeId"": 3
    }
  ],
  ""Channels"": [
    {
      ""ChannelName"": ""AssistMe"",
      ""IsActiveChannel"": false,
      ""ChannelId"": 1,
      ""IsActive"": false
    }
  ],
  ""UserName"": """
                            + (this.Context["ClientsWithCompanySource.ClientsWithCompanyData#csv.UniqueReference"].ToString() + "\"\r\n}"))))));
                request8.Body = request8Body;
                yield return request8;
                request8 = null;
            }

            this.EndLoop(conditionalRule2);
        }
    }
}
