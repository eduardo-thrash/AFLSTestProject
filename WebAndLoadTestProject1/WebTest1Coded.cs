//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAndLoadTestProject1
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;


    public class WebTestService : WebTest
    {
        string Url = "http://localhost";
        string Instance = "/AFLS/";

        public WebTestService()
        {
            this.PreAuthenticate = true;
            this.Proxy = "default";
        }

        public string RandomText(int longitud = 7)
        {
            Guid miGuid = Guid.NewGuid();
            string token = miGuid.ToString().Replace("-", string.Empty).Substring(0, longitud);
            return token;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            // Inicializar reglas de validación aplicables a todas las solicitudes de prueba web
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidateResponseUrl validationRule1 = new ValidateResponseUrl();
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidationRuleResponseTimeGoal validationRule2 = new ValidationRuleResponseTimeGoal();
                validationRule2.Tolerance = 0D;
                this.ValidateResponseOnPageComplete += new EventHandler<ValidationEventArgs>(validationRule2.Validate);
            }

            #region Access Url
            WebTestRequest request1 = new WebTestRequest("http://localhost/AFLS/");
            request1.ExpectedResponseUrl = "http://localhost/AFLS/LogOn";
            yield return request1;
            request1 = null;
            #endregion Access Url

            #region LogOn
            WebTestRequest request2 = new WebTestRequest("http://localhost/AFLS/Account/LogOn");
            request2.Method = "POST";
            request2.Headers.Add(new WebTestRequestHeader("Accept", "*/*"));
            request2.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request2.Headers.Add(new WebTestRequestHeader("Referer", "http://localhost/AFLS/LogOn"));
            StringHttpBody request2Body = new StringHttpBody();
            request2Body.ContentType = "application/json";
            request2Body.InsertByteOrderMark = false;
            request2Body.BodyString = "{\"DefaultAuth\":\"ARANDA\",\"UserName\":\"administrator\",\"Password\":\"ABC123\",\"RememberM" +
                "e\":\"true\"}";
            request2.Body = request2Body;
            yield return request2;
            request2 = null;
            #endregion LogOn


            #region Services
            CountingLoopRule conditionalRuleService = new CountingLoopRule();
            conditionalRuleService.ContextParameterName = "Contador de bucle";
            conditionalRuleService.IterationsCount = 20D;

            int maxIterationsService = -1;
            bool advanceDataCursorsService = true;
            this.BeginLoop(conditionalRuleService, maxIterationsService, advanceDataCursorsService);

            for (; this.ExecuteConditionalRule(conditionalRuleService);)
            {               
                WebTestRequest requestService = new WebTestRequest("http://localhost/AFLS/Services/Save");
                requestService.Method = "POST";
                requestService.Headers.Add(new WebTestRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"));
                requestService.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
                requestService.Headers.Add(new WebTestRequestHeader("Referer", "http://localhost/AFLS/"));
                StringHttpBody requestServiceBody = new StringHttpBody();
                requestServiceBody.ContentType = "application/json";
                requestServiceBody.InsertByteOrderMark = false;

                string ServiceName = "Service ";
                Random rnd = new Random();
                int ServType = rnd.Next(1, 3);
                int ServAssigmentType = rnd.Next(1, 3);

                if (ServType==1)
                {
                    ServiceName = ServiceName + "DE";
                }
                else
                {
                    ServiceName = ServiceName + "ES";
                }

                if (ServAssigmentType == 1)
                {
                    ServiceName = ServiceName + " AD";
                }
                else
                {
                    ServiceName = ServiceName + " DP";
                }


                ServiceName = ServiceName + " " + RandomText(4);

                requestServiceBody.BodyString = "{\"BaseCost\":12000,\"Description\":\"descripcion\",\"Name\":\""+ ServiceName + "\",\"ExecutionTime\":\"\",\"IsActive\":true,\"selected\":true,\"InvCost\":2400,\"ModelId\":1,\"CalendarId\":1,\"SlaId\":1,\"UcId\":2,\"OlaId\":3,\"Type\":"+ServType+",\"ProviderAssignmentType\":\""+ServAssigmentType.ToString()+"\",\"IsDefault\":true,\"IsPriorityOrEmergency\":true,\"Model\":1,\"SubjectDefault\":\"Asunto servicio\",\"Calendar\":1,\"Sla\":1,\"Uc\":2,\"Ola\":3,\"ServiceType\":\""+ServType.ToString()+"\",\"ser_hours\":\"0\",\"ser_mins\":\"30\",\"IsEnableCreateToSpecialist\":false,\"IsProvideAllCIs\":false,\"TimePlanning\":30,\"Skills\":[{\"Description\":\"Orci varius natoque penatibus et magnis dis parturient montes nascetur ridiculus mus.\",\"Id\":1,\"IsActive\":true,\"Name\":\"Habilidad\",\"QuatityAssociatedGroups\":0,\"QuatityAssociatedServices\":0,\"QuatityAssociatedSpecialists\":0,\"label\":\"Habilidad\",\"value\":\"Habilidad\",\"IsRequired\":false,\"Weight\":2}],\"ServiceProducts\":[{\"ProductId\":4,\"Quantity\":1,\"Required\":true},{\"ProductId\":3,\"Quantity\":1,\"Required\":true}],\"ProviderServices\":[],\"ServiceTasks\":[],\"AdditionalFields\":[]}";
                requestService.Body = requestServiceBody;
                yield return requestService;
                requestService = null;
            }

            this.EndLoop(conditionalRuleService);
            #endregion Services
        }
    }
}
